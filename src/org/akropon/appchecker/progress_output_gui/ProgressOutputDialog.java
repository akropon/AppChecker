package org.akropon.appchecker.progress_output_gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.SwingUtilities;
import org.akropon.appchecker.analyzing.PluginBackend;
import org.openide.util.Exceptions;

/** Window, that shows progress status and details messages.
 * 
 * Allows to change it's condition by {@link  writeMessage} and {@link setProgress}
 *
 * @author akropon
 */
public class ProgressOutputDialog extends javax.swing.JDialog {

	public static final int WAITING_TICK_PERIOD = 50; // in milliseconds
	public static final int RESULT_OK = 0;
	public static final int RESULT_CANCEL = 0;
	
	private int result;
	
	/**
	 * Creates new form ProgressOutputDialog
	 */
	public ProgressOutputDialog(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
		
		result = RESULT_CANCEL;
		
		btn_finish.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				btnFinishAction();
			}
		});
		
		btn_cancel.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				btnCancelAction();
			}
		});
	}
	
	private void btnFinishAction() {
		result = RESULT_OK;
		this.setVisible(false);
	}
	
	private void btnCancelAction() {
		PluginBackend.cancel();
		try {
			while (PluginBackend.isPerforming()) {
					Thread.sleep(WAITING_TICK_PERIOD);
			}
		} catch (InterruptedException ex) {
			Exceptions.printStackTrace(ex);
		}
		this.setVisible(false);
	}

	/** Set progress showing at progress bar.
	 * 
	 * If current progress is 100, this function won't change progress any more.
	 * If new value of progress is 100, button "cancel" will be deactivated,
	 *		and button "finish" will be activated.
	 * If new value of progress is less then 0, it will be understood like 0.
	 * If new value of progress is more then 100, it will be understood like 100.
	 * 
	 * @param progressValue - value of progress in [0,100]
	 * @return true - success, false - progress can't be changed by new value
	 */
	public void setProgress(final int progressValue) {
		if (SwingUtilities.isEventDispatchThread()) {
			setProgress_async(progressValue);
		} else {
			SwingUtilities.invokeLater(new Runnable() {
				@Override
				public void run() {
					setProgress_async(progressValue);
				}
			});
		}
	}
	private boolean setProgress_async(int progressValue) {
		if (progressBar.getValue() == 100) return false;
		
		if (progressValue<0) progressValue=0;
		else if (progressValue>100) progressValue=100;
		
		progressBar.setValue(progressValue);
		
		if (progressValue==100) {
			btn_cancel.setEnabled(false);
			btn_finish.setEnabled(true);
		}
		return true;
	}
	
	/** 
	 *  Write message to details messages field.
	 * 
	 *  Every message will be written from new line.
	 */
	public void writeMessage(final String msg) {
		if (SwingUtilities.isEventDispatchThread()) {
			writeMessage_async(msg);
		} else {
			SwingUtilities.invokeLater(new Runnable() {
				@Override
				public void run() {
					writeMessage_async(msg);
				}
			});
		}
	}
	public void writeMessage_async(String msg) {
		txtar_details.append(msg+"\n");
	}
	
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtar_details = new javax.swing.JTextArea();
        btn_finish = new javax.swing.JButton();
        btn_cancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(510, 2147483647));
        setMinimumSize(new java.awt.Dimension(510, 220));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ProgressOutputDialog.class, "ProgressOutputDialog.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ProgressOutputDialog.class, "ProgressOutputDialog.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(ProgressOutputDialog.class, "ProgressOutputDialog.jLabel3.text")); // NOI18N
        jLabel3.setToolTipText(org.openide.util.NbBundle.getMessage(ProgressOutputDialog.class, "ProgressOutputDialog.jLabel3.toolTipText")); // NOI18N

        txtar_details.setColumns(20);
        txtar_details.setRows(5);
        jScrollPane1.setViewportView(txtar_details);

        org.openide.awt.Mnemonics.setLocalizedText(btn_finish, org.openide.util.NbBundle.getMessage(ProgressOutputDialog.class, "ProgressOutputDialog.btn_finish.text")); // NOI18N
        btn_finish.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(btn_cancel, org.openide.util.NbBundle.getMessage(ProgressOutputDialog.class, "ProgressOutputDialog.btn_cancel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(0, 177, Short.MAX_VALUE))
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_cancel)
                        .addGap(18, 18, 18)
                        .addComponent(btn_finish)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_finish)
                    .addComponent(btn_cancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

//	/**
//	 * @param args the command line arguments
//	 */
//	public static void main(String args[]) {
//		/* Set the Nimbus look and feel */
//		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//		 */
//		try {
//			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//				if ("Nimbus".equals(info.getName())) {
//					javax.swing.UIManager.setLookAndFeel(info.getClassName());
//					break;
//				}
//			}
//		} catch (ClassNotFoundException ex) {
//			java.util.logging.Logger.getLogger(ProgressOutputDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//		} catch (InstantiationException ex) {
//			java.util.logging.Logger.getLogger(ProgressOutputDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//		} catch (IllegalAccessException ex) {
//			java.util.logging.Logger.getLogger(ProgressOutputDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
//			java.util.logging.Logger.getLogger(ProgressOutputDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//		}
//		//</editor-fold>
//
//		/* Create and display the dialog */
//		java.awt.EventQueue.invokeLater(new Runnable() {
//			public void run() {
//				ProgressOutputDialog dialog = new ProgressOutputDialog(new javax.swing.JFrame(), true);
//				dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//					@Override
//					public void windowClosing(java.awt.event.WindowEvent e) {
//						System.exit(0);
//					}
//				});
//				dialog.setVisible(true);
//			}
//		});
//	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_cancel;
    private javax.swing.JButton btn_finish;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTextArea txtar_details;
    // End of variables declaration//GEN-END:variables
}
